// Use this file to test .smash syntax highlighting

Function call
    Step one

Function call

* Function declaration
    Step one
        Step two

[
    Multi-level step block
]

* Function declaration {{var}} and 'string' 'http://site.com'
    Step one

* Function declaration {{var}} and 'string' [
    Step one

    * Second function declaration [ // comment
        Step
    ]

    Named Multi-level step block [
        Step 'here'
    ]

    Named Multi-level step block + [
        Named Multi-level step block + [
            + [
            ]
        ]
    ]

    + +? [
    ] // comment

    [ // comment
        Step
        Step
        - textual
    ]
        Something else
]

Function call
    Function call   // comment here
    Function call 'non // comment string' // comment here
        Textual step 'non // comment non-string' - // comment here
        Textual step 'non-string' + - ! !!
        - Textual step 'non-string' +
            // comment on its own line

            - Textual #group1 #group2 // comment
            #group1 + Function call #group2 #group-3 // comment

            Skipped step -s
                Other stuff -

            Skip below step .s
                Stuff under the skip below step...
                    More stuff under skip below step .. ~

            Skip branch step $s

            Step block one -
            Step block two -
            Step block three -

                Under step block -

            Step block one
            Step block two
            Step block three ..

                Should this be blue or white?

            Step block one
            Step block two ..
            Step block three

                Should this be blue or white?

            ..
            Sequential step block one -
            Sequential step block two -
            Sequential step block three -
            {var} = "something \" "

                Under step block -
                {var1} = "something 111 \" "
                {var222} = "something 222 \" "
                {var3333} = "something 333 \" "

                ..
                {var1} = "something 111 \" "
                {var222} = "something 222 \" "
                {var3333} = "something 333 \" "

                ..  // comment here
                Sequential step block one - // comment
                Sequential step block two -
                Sequential step block three -
                    Not sequential block -

                    ..
                    Sequential step block one -
                    Sequential step block two -
                    Sequential step block three -
                Not sequential block -

                        ..
                        Sequential step block one -
                        Sequential step block two -
                        Sequential step block three -

                    Not sequential block -

                            ..
                            Sequential step block one -
                            Sequential step block two -
                                ..
                                Sequential step block one -
                                Sequential step block two -
                                    Not sequential -

.. Sequential step 'string' .. +? //comment
    Sequential one -
        Sequential two -
    Sequential three -
Not sequential

    Sequential step 'string' .. +? //comment
        Sequential one -
            Sequential two -
        Sequential three -
    Not sequential

        Sequential step 'string' .. +? //comment

            Sequential one -

                Sequential two -

            Sequential three -

        Not sequential

            Sequential step 'string' .. +? //comment
                Sequential one -
                    Sequential two -
                Sequential three -
            Not sequential

            IsOnly $
            Debug ~
            Debug ~~

            Sequential and debug ~ ..

            $ IsOnly step -
                IsOnly step $ -
                    ~ Debug step // comment
                        Debug step + ~ - //comment
                            Non-debug step // comment ~ comment

                ~ Debug code {var} {var2:} 'string' block {
                }
                    Debug code block ~ {
                    }
                        Non-debug ~ step

            - + +? ! Modifiers+?- - + +? !

            Step with \\ special \" chars "string \" " {"var"}

            Code block 'non-string' {var} {
                throw new Error("oops");
                if(something) {
                    something();
                }
                return 6;
            }

                * Function declaration code block {
                    throw new Error("oops");
                    if(something) {
                        something();
                    }
                    return 6;
                }

                    $ Code block ~ {
                        throw new Error("oops");
                        if(something) {
                            something();
                        }
                        return 6;
                    }

                        .. Code block {
                            throw new Error("oops");
                            if(something) {
                                something();
                            }
                            return 6;
                        }

* Function declaration
    {global var}='something'
        {global var} is 'something'
            {{local var}}="something else here {var} {var:}", {{local var2}} = "something {var inside string}"
                {var} = [ 1st 'Login' box near 'title' {var} ]
                    {escaping} = outside 'single\'\\\'quote\n' outside "double\"quote\\\"" outside [ "element\"" 'finder\'' \] ] outside
                        {escaping}=outside 'something' outside 'something else' outside
                            {escaping}=outside "something" outside "something else" outside
                                {escaping}=outside [something] outside [something else] outside
                                    {lookahead var:} {{{var in squigglies}}} {a} {}

* Other function {{var}} 'string' {
    // code block
    let x = 5 + 5;
    setTimeout(() => {
        console.log("something");
    }, 1000);

    return new Object();
}

.. * Func - +?

$ .. * Func - +?

- +? * NonFunc - +?

*** Before every branch {
    throw new Error("oops");
}

*** AFTER every Branch {
    throw new Error("oops");
}

*** Before  every  step {
    throw new Error("oops");
}

    *** After every step {
        throw new Error("oops");
    }

*** Before Everything  {
    throw new Error("oops");
}

*** After Everything {
    throw new Error("oops");
}

*** Invalid hook name {
    throw new Error("oops");
}
